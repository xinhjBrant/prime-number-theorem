import analysis.p_series
import number_theory.arithmetic_function
import analysis.special_functions.log.basic
import data.finset.basic
import topology.algebra.infinite_sum
import topology.bases
import topology.uniform_space.basic
import tactic.abel
import tactic.linarith
import analysis.normed_space.basic
import topology.algebra.order.liminf_limsup
import topology.local_homeomorph

noncomputable theory

universes u v

open filter topological_space set classical uniform_space function
open_locale classical uniformity topological_space filter

variables {Œ± : Type u} {Œ≤ : Type v} [uniform_space Œ±]
open finset
open_locale big_operators
open filter set
open_locale topological_space big_operators classical filter nnreal

namespace asymptotics

namespace nat
namespace arithmetic_function
variable (R : Type*)
section has_zero
variable [has_zero R]

localized "notation `Œ∂` := nat.arithmetic_function.zeta" in arithmetic_function
notation `‚åä` a `‚åã‚Çä` := nat.floor a

--Already Have...
--counts the number of prime numbers less than x.
def pi : ‚Ñï ‚Üí ‚Ñï := Œª(x: ‚Ñï), ((range x).filter prime).card
def pi_eps (eps: ‚Ñù) : ‚Ñï ‚Üí ‚Ñï := Œª(x: ‚Ñï), ((Ioc (x:‚Ñù)^((1:‚Ñù) - eps) (x:‚Ñù)).filter prime).card
def zeta': ‚ÑÇ ‚Üí ‚ÑÇ:= Œª (x:‚ÑÇ ), ‚àë'n, 1 / (n ^ x)
def p_log : ‚Ñï ‚Üí ‚Ñù  := Œª (x:‚Ñï ), if hx : prime x  then real.log x else 0
def theta :‚Ñï ‚Üí ‚Ñù := Œª (x : ‚Ñï), ‚àë p in range x, p_log p
def phi  : ‚ÑÇ ‚Üí ‚ÑÇ := Œª (s : ‚ÑÇ), ‚àë'p, (p_log p) / (p ^ s)


def PNTfunc: ‚Ñï ‚Üí ‚Ñù :=  Œª(x: ‚Ñï), (pi x:‚Ñù ) / ((x:‚Ñù ) /real.log (x:‚Ñù):‚Ñù)
def thetafunc:‚Ñï ‚Üí ‚Ñù :=  Œª(x: ‚Ñï), theta x/ (x:‚Ñù)

theorem tendsto_equiv_has_bound (seq : ‚Ñï ‚Üí ‚Ñù): 
tendsto seq at_top (ùìù 1) ‚Üî ‚àÄ c_1 < 1, ‚àÄ c_2 > 1, 
‚àÉ N, ‚àÄ n ‚â• N, c_1 < seq n ‚àß seq n < c_2 :=
begin
  rw [at_top_basis.tendsto_iff (nhds_basis_Ioo (1 : ‚Ñù))],
  simp only [set.mem_Ici, set.mem_Ioo, exists_true_left, 
  and_imp, prod.forall, gt_iff_lt,
    ge_iff_le],
  exact forall_congr (Œª _, forall_swap),
  apply_instance,
end

theorem PNT : tendsto PNTfunc at_top (ùìù 1)
:=begin
rw tendsto_equiv_has_bound,
have statement_1: tendsto thetafunc at_top (ùìù 1):=begin 
   rw tendsto_equiv_has_bound, 
   sorry,end,
have h‚ÇÅ: ‚àÄ Œµ ‚àà Ioc 0 (1/2), ‚àÄ x > 1, theta x ‚â§ (real.log x)* pi x:=sorry,
sorry,
end

lemma have_bounds_equiv_is_O:
‚àÉ a > 0, ‚àÉb > a, 
‚àÉ N :‚Ñï, ‚àÄ n ‚â• N, a < PNTfunc n ‚àß PNTfunc n < b ‚Üî is_O at_top (Œª x, (pi x : ‚Ñù)) (Œª x, x / real.log x):=sorry



theorem Chebyshevs_bounds: ‚àÉ a > 0, ‚àÉb > a, 
‚àÉ N :‚Ñï, ‚àÄ n ‚â• N, a < PNTfunc n ‚àß PNTfunc n < b:=
begin
/-have h‚ÇÅ: ‚àÉ N :‚Ñï, ‚àÄ n ‚â• N, (4/3)^n ‚â§ ((range 2* n).filter prime):=sorry,-/
sorry,
end

--my attempt
lemma step‚ÇÅ (n: ‚Ñï): choose (2*n) n < (4^n):=
begin
have h‚ÇÅ: (4^n) = ((1+1)^(2*n)):=begin
 have h‚ÇÅ‚ÇÅ: (4^n) = (2^2)^n:=by ring,
 rw h‚ÇÅ‚ÇÅ,
 rw pow_mul,
 end,
rw h‚ÇÅ,
have h‚ÇÇ: ((1+1)^(2*n)) = ‚àë k in range (2*n), choose (2*n) k:=begin
sorry,
end,
rw h‚ÇÇ,
sorry,
end

lemma step‚ÇÇ (n: ‚Ñï): choose (2*n) n ‚â•  (2^n):=
begin
induction n with d hd,
simp,
sorry,
end



end nat
end arithmetic_function

end